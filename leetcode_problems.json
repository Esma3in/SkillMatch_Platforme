[
    {
      "id": 1,
      "title": "Two Sum",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
      "constraints": "2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9",
      "examples": [
        {"input": "nums = [2,7,11,15], target = 9", "output": "[0,1]"},
        {"input": "nums = [3,2,4], target = 6", "output": "[1,2]"}
      ],
      "difficulty": "easy",
      "test_cases": [
        {"input": [2, 7, 11, 15], "target": 9, "expected_output": [0, 1]},
        {"input": [3, 2, 4], "target": 6, "expected_output": [1, 2]}
      ],
      "starter_code": {
        "python": "def two_sum(nums, target):\n    pass"
      },
      "solution_code": {
        "python": "def two_sum(nums, target):\n    hashmap = {}\n    for i, num in enumerate(nums):\n        diff = target - num\n        if diff in hashmap:\n            return [hashmap[diff], i]\n        hashmap[num] = i"
      },
      "skill_id": 1,
      "challenge_id": null,
      "creator_id": 5,
      "created_at": "2025-05-25T00:00:00",
      "updated_at": "2025-05-25T00:00:00"
    },
    {
      "id": 2,
      "title": "Valid Parentheses",
      "description": "Check if the input string containing brackets is valid.",
      "constraints": "1 <= s.length <= 10^4",
      "examples": [
        {"input": "s = \"()[]{}\"", "output": "true"},
        {"input": "s = \"(]\"", "output": "false"}
      ],
      "difficulty": "easy",
      "test_cases": [
        {"input": "()[]{}", "expected_output": true},
        {"input": "(]", "expected_output": false}
      ],
      "starter_code": {
        "python": "def is_valid(s):\n    pass"
      },
      "solution_code": {
        "python": "def is_valid(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack"
      },
      "skill_id": 2,
      "challenge_id": 1,
      "creator_id": 5,
      "created_at": "2025-05-25T00:00:00",
      "updated_at": "2025-05-25T00:00:00"
    },
    {
      "id": 3,
      "title": "Merge Two Sorted Lists",
      "description": "Merge two sorted linked lists and return it as a new list.",
      "constraints": "The number of nodes in both lists is in the range [0, 50].",
      "examples": [
        {"input": "l1 = [1,2,4], l2 = [1,3,4]", "output": "[1,1,2,3,4,4]"}
      ],
      "difficulty": "easy",
      "test_cases": [
        {"input": {"l1": [1, 2, 4], "l2": [1, 3, 4]}, "expected_output": [1, 1, 2, 3, 4, 4]}
      ],
      "starter_code": {
        "python": "def merge_two_lists(l1, l2):\n    pass"
      },
      "solution_code": {
        "python": "def merge_two_lists(l1, l2):\n    dummy = ListNode(0)\n    current = dummy\n    while l1 and l2:\n        if l1.val < l2.val:\n            current.next = l1\n            l1 = l1.next\n        else:\n            current.next = l2\n            l2 = l2.next\n        current = current.next\n    current.next = l1 or l2\n    return dummy.next"
      },
      "skill_id": 3,
      "challenge_id": 2,
      "creator_id": 6,
      "created_at": "2025-05-25T00:00:00",
      "updated_at": "2025-05-25T00:00:00"
    },
    {
      "id": 4,
      "title": "Longest Substring Without Repeating Characters",
      "description": "Given a string, find the length of the longest substring without repeating characters.",
      "constraints": "0 <= s.length <= 5 * 10^4",
      "examples": [
        {"input": "s = \"abcabcbb\"", "output": "3"}
      ],
      "difficulty": "medium",
      "test_cases": [
        {"input": "abcabcbb", "expected_output": 3},
        {"input": "bbbbb", "expected_output": 1}
      ],
      "starter_code": {
        "python": "def length_of_longest_substring(s):\n    pass"
      },
      "solution_code": {
        "python": "def length_of_longest_substring(s):\n    seen = {}\n    l = 0\n    max_len = 0\n    for r, char in enumerate(s):\n        if char in seen and seen[char] >= l:\n            l = seen[char] + 1\n        seen[char] = r\n        max_len = max(max_len, r - l + 1)\n    return max_len"
      },
      "skill_id": 4,
      "challenge_id": null,
      "creator_id": 7,
      "created_at": "2025-05-25T00:00:00",
      "updated_at": "2025-05-25T00:00:00"
    }
  ]
  