[
    {
      "id": 1,
      "title": "Two Sum",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
      "constraints": "2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9",
      "examples": [
        {"input": "nums = [2,7,11,15], target = 9", "output": "[0,1]"},
        {"input": "nums = [3,2,4], target = 6", "output": "[1,2]"}
      ],
      "difficulty": "easy",
      "test_cases": [
        {"input": [2, 7, 11, 15], "target": 9, "expected_output": [0, 1]},
        {"input": [3, 2, 4], "target": 6, "expected_output": [1, 2]}
      ],
      "starter_code": {
        "javascript": "function twoSum(nums, target) {\n  // Your code here\n}",
        "python": "def two_sum(nums, target):\n    # Your code here\n    pass",
        "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your code here\n        return new int[0];\n    }\n}",
        "php": "function twoSum($nums, $target) {\n    // Your code here\n}"
      },
      "solution_code": {
        "javascript": "function twoSum(nums, target) {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    const complement = target - nums[i];\n    if (map[complement] !== undefined) {\n      return [map[complement], i];\n    }\n    map[nums[i]] = i;\n  }\n  return [];\n}",
        "python": "def two_sum(nums, target):\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []"
      },
      "skill_id": 1,
      "challenge_id": null,
      "creator_id": 1
    },
    {
      "id": 2,
      "title": "Valid Parentheses",
      "description": "Check if the input string containing brackets is valid.",
      "constraints": "1 <= s.length <= 10^4",
      "examples": [
        {"input": "s = \"()[]{}\"", "output": "true"},
        {"input": "s = \"(]\"", "output": "false"}
      ],
      "difficulty": "easy",
      "test_cases": [
        {"input": "()[]{}", "expected_output": true},
        {"input": "(]", "expected_output": false}
      ],
      "starter_code": {
        "javascript": "function isValid(s) {\n  // Your code here\n}",
        "python": "def is_valid(s):\n    # Your code here\n    pass",
        "java": "class Solution {\n    public boolean isValid(String s) {\n        // Your code here\n        return false;\n    }\n}",
        "php": "function isValid($s) {\n    // Your code here\n}"
      },
      "solution_code": {
        "javascript": "function isValid(s) {\n  const stack = [];\n  const mapping = {')': '(', '}': '{', ']': '['};\n  \n  for (let char of s) {\n    if (char in mapping) {\n      const topElement = stack.pop() || '#';\n      if (topElement !== mapping[char]) {\n        return false;\n      }\n    } else {\n      stack.push(char);\n    }\n  }\n  \n  return stack.length === 0;\n}",
        "python": "def is_valid(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack"
      },
      "skill_id": 2,
      "challenge_id": 1,
      "creator_id": 1
    },
    {
      "id": 3,
      "title": "Merge Two Sorted Lists",
      "description": "Merge two sorted linked lists and return it as a new list.",
      "constraints": "The number of nodes in both lists is in the range [0, 50].",
      "examples": [
        {"input": "l1 = [1,2,4], l2 = [1,3,4]", "output": "[1,1,2,3,4,4]"}
      ],
      "difficulty": "easy",
      "test_cases": [
        {"input": {"l1": [1, 2, 4], "l2": [1, 3, 4]}, "expected_output": [1, 1, 2, 3, 4, 4]}
      ],
      "starter_code": {
        "javascript": "function mergeTwoLists(l1, l2) {\n  // Your code here\n}",
        "python": "def merge_two_lists(l1, l2):\n    # Your code here\n    pass"
      },
      "solution_code": {
        "javascript": "function mergeTwoLists(l1, l2) {\n  let dummy = { val: -1, next: null };\n  let current = dummy;\n  \n  while (l1 && l2) {\n    if (l1.val < l2.val) {\n      current.next = l1;\n      l1 = l1.next;\n    } else {\n      current.next = l2;\n      l2 = l2.next;\n    }\n    current = current.next;\n  }\n  \n  current.next = l1 || l2;\n  return dummy.next;\n}",
        "python": "def merge_two_lists(l1, l2):\n    dummy = ListNode(-1)\n    current = dummy\n    \n    while l1 and l2:\n        if l1.val < l2.val:\n            current.next = l1\n            l1 = l1.next\n        else:\n            current.next = l2\n            l2 = l2.next\n        current = current.next\n    \n    current.next = l1 or l2\n    return dummy.next"
      },
      "skill_id": 3,
      "challenge_id": 2,
      "creator_id": 1
    },
    {
      "id": 4,
      "title": "Longest Substring Without Repeating Characters",
      "description": "Given a string, find the length of the longest substring without repeating characters.",
      "constraints": "0 <= s.length <= 5 * 10^4",
      "examples": [
        {"input": "s = \"abcabcbb\"", "output": "3"}
      ],
      "difficulty": "medium",
      "test_cases": [
        {"input": "abcabcbb", "expected_output": 3},
        {"input": "bbbbb", "expected_output": 1}
      ],
      "starter_code": {
        "javascript": "function lengthOfLongestSubstring(s) {\n  // Your code here\n}",
        "python": "def length_of_longest_substring(s):\n    # Your code here\n    pass"
      },
      "solution_code": {
        "javascript": "function lengthOfLongestSubstring(s) {\n  let maxLength = 0;\n  let start = 0;\n  const charMap = {};\n  \n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char in charMap && charMap[char] >= start) {\n      start = charMap[char] + 1;\n    } else {\n      maxLength = Math.max(maxLength, i - start + 1);\n    }\n    charMap[char] = i;\n  }\n  \n  return maxLength;\n}",
        "python": "def length_of_longest_substring(s):\n    seen = {}\n    max_len = 0\n    start = 0\n    \n    for i, char in enumerate(s):\n        if char in seen and seen[char] >= start:\n            start = seen[char] + 1\n        else:\n            max_len = max(max_len, i - start + 1)\n        seen[char] = i\n        \n    return max_len"
      },
      "skill_id": 4,
      "challenge_id": null,
      "creator_id": 1
    }
]
